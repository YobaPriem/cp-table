{"version":3,"sources":["hooks/request.ts","hooks/sort.ts","hooks/search.ts","components/Table.tsx","pages/table.tsx","App.tsx","Routes.tsx","index.tsx"],"names":["useRequest","React","useState","loading","setLoading","request","useCallback","url","a","fetch","response","json","data","ok","Error","message","useSort","items","settings","sortSettings","setSortSettings","sortedItems","useMemo","sort","b","key","direction","setSettings","useSearch","searchedItems","setSearchedItems","searchQuery","setSearchQuery","useEffect","filteredItems","filter","item","Object","keys","some","toString","search","useStyles","makeStyles","container","maxHeight","tableSearch","margin","pagination","width","display","justifyContent","padding","Table","props","classes","page","setPage","dataSet","Paper","TextField","className","id","label","onChange","event","target","value","TableContainer","component","aria-label","TableHead","TableRow","undefined","map","row","TableCell","onClick","TableSortLabel","active","TableBody","slice","userId","title","body","Pagination","count","Math","ceil","length","shape","newPage","TablePage","setData","console","log","fetchData","App","path","exact","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5daa9a77.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst useRequest = () => {\r\n    const [loading, setLoading] = React.useState(false)\r\n\r\n    const request = React.useCallback(async (url: string) => {\r\n        setLoading(true)\r\n        try {\r\n\r\n            const response = await fetch(url)\r\n\r\n            const data = await response.json()\r\n\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.message || 'Ой-ей! Приключилось что-то нехорошее!')\r\n            }\r\n\r\n\r\n            return data\r\n        } catch (e) {\r\n            throw e\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }, [])\r\n    return { request, loading }\r\n}\r\n\r\nexport default useRequest\r\n","import React from 'react'\r\n\r\n// interface SortSettings {\r\n//     direction: string,\r\n//     key: string\r\n// }\r\n\r\nconst useSort = (items: any, settings: any = 'null') => {\r\n    const [sortSettings, setSortSettings] = React.useState(settings)\r\n    const sortedItems = React.useMemo(() => {\r\n        if (sortSettings !== null) {\r\n           items.sort((a: any, b:any) => {\r\n                if (a[sortSettings.key] < b[sortSettings.key]) {\r\n                    return sortSettings.direction === 'asc' ? -1 : 1\r\n                }\r\n\r\n                if (a[sortSettings.key] > b[sortSettings.key]) {\r\n                    return sortSettings.direction === 'asc' ? 1 : -1\r\n                }\r\n\r\n                return 0\r\n            })\r\n        }\r\n\r\n        return items\r\n    }, [items, sortSettings])\r\n\r\n    const setSettings = (key: string) => {\r\n        let direction = 'asc'\r\n        if (\r\n            sortSettings &&\r\n            sortSettings.key === key &&\r\n            sortSettings.direction === 'asc'\r\n        ) {\r\n          direction = 'desc';\r\n        }\r\n\r\n        setSortSettings({ key, direction });\r\n    }\r\n\r\n    return { sortedItems, sortSettings, setSettings }\r\n}\r\n\r\nexport default useSort\r\n","import React from 'react'\r\n\r\ninterface Data {\r\n    [key: string]: any\r\n}\r\n\r\nconst useSearch = (items: Data[]) => {\r\n    const [searchedItems, setSearchedItems] = React.useState([] as any)\r\n    const [searchQuery, setSearchQuery] = React.useState('')\r\n\r\n    React.useEffect(() => {\r\n        const filteredItems = items.filter(item => {\r\n            const isMatched: boolean = Object.keys(item).some((key: any) => {\r\n                if (item[key].toString().search(searchQuery) !== -1) {\r\n                    return item[key].toString().search(searchQuery) !== -1\r\n                }\r\n            })\r\n\r\n            return isMatched\r\n        })\r\n\r\n        setSearchedItems(filteredItems)\r\n    }, [items, searchQuery])\r\n\r\n    return { searchedItems, setSearchQuery }\r\n}\r\n\r\nexport default useSearch","import React from 'react'\r\nimport { /*withStyles, Theme, createStyles,*/ makeStyles } from '@material-ui/core/styles';\r\nimport TableBlock from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport useSort from '../hooks/sort'\r\nimport useSearch from '../hooks/search'\r\n\r\nconst rowsPerPage: number = 50\r\n\r\ninterface Data {\r\n    id: number,\r\n    userId: number,\r\n    title: string,\r\n    body: string,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n      maxHeight: 700,\r\n    },\r\n    tableSearch: {\r\n        margin: 16,\r\n    },\r\n    pagination: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        padding: '15px 0'\r\n    }\r\n})\r\n\r\nconst Table = (props: {dataSet: Data[]}) => {\r\n    const classes = useStyles()\r\n    const [page, setPage] = React.useState(0)\r\n    const { searchedItems, setSearchQuery } = useSearch(props.dataSet)\r\n    const { sortedItems, sortSettings, setSettings } = useSort(searchedItems)\r\n\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        setPage(newPage - 1);\r\n    }\r\n\r\n    const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Paper>\r\n            <TextField className={classes.tableSearch} id=\"search\" label=\"Поиск\" onChange={handleSearch}/>\r\n            <TableContainer className={classes.container} component={Paper}>\r\n                <TableBlock aria-label=\"customized table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {\r\n                                sortedItems[0] !== undefined &&\r\n                                    Object.keys(sortedItems[0])\r\n                                    .map(row => (\r\n                                        <TableCell\r\n                                        key={row}\r\n                                        onClick={\r\n                                            ()=>{\r\n                                                setSettings(row)\r\n                                            }\r\n                                        }\r\n                                        >\r\n                                            <TableSortLabel\r\n                                                active={sortSettings.key === row}\r\n                                                direction={sortSettings.key === row ? sortSettings.direction  : 'asc'}\r\n                                            >{row}</TableSortLabel>\r\n                                        </TableCell>\r\n                                    ))\r\n                            }\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {sortedItems\r\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((row: Data) => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.userId}</TableCell>\r\n                                    <TableCell>{row.id}</TableCell>\r\n                                    <TableCell>{row.title}</TableCell>\r\n                                    <TableCell>{row.body}</TableCell>\r\n                                </TableRow>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </TableBlock>\r\n            </TableContainer>\r\n            <Pagination\r\n                className={classes.pagination}\r\n                count={Math.ceil(sortedItems.length / rowsPerPage)}\r\n                shape=\"rounded\"\r\n                onChange={handleChangePage}\r\n            />\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport useRequest from '../hooks/request'\r\nimport Table from '../components/Table'\r\n\r\nexport const TablePage = () => {\r\n    const { request, loading } = useRequest()\r\n    const [data, setData] = React.useState([])\r\n\r\n    React.useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await request('https://jsonplaceholder.typicode.com/posts')\r\n                setData(data)\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [request])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !loading\r\n                ?\r\n                <Table\r\n                dataSet={data}\r\n                />\r\n                :\r\n                <div>\r\n                    Грузим\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom'\nimport {Routes} from './Routes'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                {Routes()}\n            </BrowserRouter>\n        </div>\n    )\n}\n\nexport default App;\n","import {Route, Switch, Redirect} from 'react-router-dom'\nimport {TablePage} from './pages/table'\n\nexport const Routes = () => {\n    return (\n        <Switch>\n            <Route path=\"/\" exact>\n                <TablePage/>\n            </Route>\n            <Redirect to='/'/>\n        </Switch>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n"],"sourceRoot":""}